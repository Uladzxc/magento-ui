{"uid":"9d3e5b7155ea03e0","name":"test_select_price_option_in_the_dropdown_list","fullName":"tests.test_eco_friendly_page#test_select_price_option_in_the_dropdown_list","historyId":"4c81d0c0799cab31da1de51047c88eee","time":{"start":1758026055536,"stop":1758026055821,"duration":285},"description":"Check if price options available","descriptionHtml":"<p>Check if price options available</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//select[@id=\"sorter\"]\"}\n  (Session info: chrome=140.0.7339.80); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n#0 0x55dec73e694a <unknown>\n#1 0x55dec6e5b8a0 <unknown>\n#2 0x55dec6ead540 <unknown>\n#3 0x55dec6ead731 <unknown>\n#4 0x55dec6efb824 <unknown>\n#5 0x55dec6ed305d <unknown>\n#6 0x55dec6ef8c23 <unknown>\n#7 0x55dec6ed2e03 <unknown>\n#8 0x55dec6e9f968 <unknown>\n#9 0x55dec6ea05e1 <unknown>\n#10 0x55dec73aa548 <unknown>\n#11 0x55dec73ae272 <unknown>\n#12 0x55dec7391313 <unknown>\n#13 0x55dec73aedc5 <unknown>\n#14 0x55dec737649f <unknown>\n#15 0x55dec73d3158 <unknown>\n#16 0x55dec73d3332 <unknown>\n#17 0x55dec73e5a53 <unknown>\n#18 0x7fc184a9caa4 <unknown>\n#19 0x7fc184b29c3c <unknown>","statusTrace":"eco_friendly_page = <pages.eco_friendly_page.EcoFriendly object at 0x7f2cd26e7990>\n\n    @pytest.mark.smoke\n    @allure.description('Check if price options available')\n    def test_select_price_option_in_the_dropdown_list(eco_friendly_page):\n        eco_friendly_page.open_page()\n>       eco_friendly_page.select_element_from_the_dropdown_and_check_items_display(text=\"Price\")\n\ntests/test_eco_friendly_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/eco_friendly_page.py:39: in select_element_from_the_dropdown_and_check_items_display\n    dropdown = self.find(loc.dropdown_list)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npages/base_page.py:21: in find\n    return self.driver.find_element(*locator)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2cd26c5a10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#17 0x55dec73e5a53 \\\\u003Cunknown>\\\\n#18 0x7fc184a9caa4 \\\\u003Cunknown>\\\\n#19 0x7fc184b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//select[@id=\"sorter\"]\"}\nE         (Session info: chrome=140.0.7339.80); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x55dec73e694a <unknown>\nE       #1 0x55dec6e5b8a0 <unknown>\nE       #2 0x55dec6ead540 <unknown>\nE       #3 0x55dec6ead731 <unknown>\nE       #4 0x55dec6efb824 <unknown>\nE       #5 0x55dec6ed305d <unknown>\nE       #6 0x55dec6ef8c23 <unknown>\nE       #7 0x55dec6ed2e03 <unknown>\nE       #8 0x55dec6e9f968 <unknown>\nE       #9 0x55dec6ea05e1 <unknown>\nE       #10 0x55dec73aa548 <unknown>\nE       #11 0x55dec73ae272 <unknown>\nE       #12 0x55dec7391313 <unknown>\nE       #13 0x55dec73aedc5 <unknown>\nE       #14 0x55dec737649f <unknown>\nE       #15 0x55dec73d3158 <unknown>\nE       #16 0x55dec73d3332 <unknown>\nE       #17 0x55dec73e5a53 <unknown>\nE       #18 0x7fc184a9caa4 <unknown>\nE       #19 0x7fc184b29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1758026055278,"stop":1758026055535,"duration":257},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"eco_friendly_page","time":{"start":1758026055536,"stop":1758026055536,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eco_friendly_page"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"3495-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eco_friendly_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":["smoke"]},"source":"9d3e5b7155ea03e0.json","parameterValues":[]}