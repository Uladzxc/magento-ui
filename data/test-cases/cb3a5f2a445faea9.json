{"uid":"cb3a5f2a445faea9","name":"test_products_displayed_as_grid","fullName":"tests.test_eco_friendly_page#test_products_displayed_as_grid","historyId":"0ca1eda4631d1f00692b707e7ba9c949","time":{"start":1758026034085,"stop":1758026044496,"duration":10411},"description":"Check if grid type view is selected","descriptionHtml":"<p>Check if grid type view is selected</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x557087d2d94a <unknown>\n#1 0x5570877a28a0 <unknown>\n#2 0x5570877f4540 <unknown>\n#3 0x5570877f4731 <unknown>\n#4 0x557087842824 <unknown>\n#5 0x55708781a05d <unknown>\n#6 0x55708783fc23 <unknown>\n#7 0x557087819e03 <unknown>\n#8 0x5570877e6968 <unknown>\n#9 0x5570877e75e1 <unknown>\n#10 0x557087cf1548 <unknown>\n#11 0x557087cf5272 <unknown>\n#12 0x557087cd8313 <unknown>\n#13 0x557087cf5dc5 <unknown>\n#14 0x557087cbd49f <unknown>\n#15 0x557087d1a158 <unknown>\n#16 0x557087d1a332 <unknown>\n#17 0x557087d2ca53 <unknown>\n#18 0x7f4c0f09caa4 <unknown>\n#19 0x7f4c0f129c3c <unknown>","statusTrace":"eco_friendly_page = <pages.eco_friendly_page.EcoFriendly object at 0x7f2cd26c4410>\n\n    @pytest.mark.regression\n    @allure.description('Check if grid type view is selected')\n    def test_products_displayed_as_grid(eco_friendly_page):\n        eco_friendly_page.open_page()\n>       eco_friendly_page.select_view(\"grid\")\n\ntests/test_eco_friendly_page.py:7: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/eco_friendly_page.py:12: in select_view\n    view_btn = self.wait.until(self.ec.element_to_be_clickable(loc.grid_btn))\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"54ccf9c9fbf542105166061bcfb63633\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f2cd2709940>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x557087d2d94a <unknown>\nE       #1 0x5570877a28a0 <unknown>\nE       #2 0x5570877f4540 <unknown>\nE       #3 0x5570877f4731 <unknown>\nE       #4 0x557087842824 <unknown>\nE       #5 0x55708781a05d <unknown>\nE       #6 0x55708783fc23 <unknown>\nE       #7 0x557087819e03 <unknown>\nE       #8 0x5570877e6968 <unknown>\nE       #9 0x5570877e75e1 <unknown>\nE       #10 0x557087cf1548 <unknown>\nE       #11 0x557087cf5272 <unknown>\nE       #12 0x557087cd8313 <unknown>\nE       #13 0x557087cf5dc5 <unknown>\nE       #14 0x557087cbd49f <unknown>\nE       #15 0x557087d1a158 <unknown>\nE       #16 0x557087d1a332 <unknown>\nE       #17 0x557087d2ca53 <unknown>\nE       #18 0x7f4c0f09caa4 <unknown>\nE       #19 0x7f4c0f129c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1758026033822,"stop":1758026034084,"duration":262},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"eco_friendly_page","time":{"start":1758026034085,"stop":1758026034085,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_eco_friendly_page"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"3495-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_eco_friendly_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":["regression"]},"source":"cb3a5f2a445faea9.json","parameterValues":[]}